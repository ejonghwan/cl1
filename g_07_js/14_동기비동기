<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>자바스크립트가 비동적기적으로 업무를 처리하는 상황</title>
</head>

<body>
  <script>

    // ######## 자바스크립트에서 비동기가 발생하는 원인 - callstack과 web api로 업무가 분산되는 과정
    function test(delay, callback) {
      setTimeout(() => {
        callback();
      }, delay)
    }

    //순서1 - start 콘솔문 실행 (js)
    console.log('start');
    //순서2 - test함수를 호출하고 그 안쪽의 setTimeout구문을 web api에게 넘기고 바로 다음 구문으로 넘어감 (js)
    test(0, () => console.log('test1'));
    //순서3 - 두번쨰 test함수를 호출하고 다시 그 안쪽의 setTimeout구문을 web api에게 넘기고 다음 구문으로 넘어감 (js)
    test(0, () => console.log('test2'));
    //순서4 - 마지막 end구문 실행 (js)
    console.log('end')




     // ######## es5에서 callback을 통한 동기화
     //순서1 - start 콘솔문 실행 (js)
     console.log('start');
    //순서2 - test함수를 호출하고 그 안쪽의 setTimeout구문을 web api에게 넘기고 바로 다음 구문으로 넘어감 (js)
    test(0, () => console.log('test1'));
    //순서3 - 두번쨰 test함수를 호출하고 다시 그 안쪽의 setTimeout구문을 web api에게 넘기고 다음 구문으로 넘어감 (js)
    test(0, () => console.log('test2'));
    //순서4 - 마지막 end구문 실행 (js)
    console.log('end')
    //es6에서 promise객체가 나오기 전 동기화 방법
    //동기화되어야 될 코드를 무조건 콜백함수로 전달
    //콜백함수로 다음에 동기적으로 실행될 코드를 넣으면 콜스택 입장에서는 애초에 다음에 실행할 코드를 물리적으로 제거
    //콜백함수를 통한 동기화 : 콜스택 입장에서 비동기 적으로 실행할 다음 코드를 원천적으로 제거
    //콜백을 통해서 동기화시의 문제점 : 점점 코드의 뎁스가 늘어나면서 코드 가독성이 떨어짐 (콜백지옥: callback hell)
    //해당 문제점의 대안으로 나온 es6 promise

    //start --> test1 --> test2 --> end
    console.log('start')

    //callstack 입장에서 첫번쨰 test함수가 호출되고 나면 더이상 callstatck 에 등록할 코드 자체가 없으니 hold되고 있음
    test(2000, () => {
      //아래 코드가 통채로 web api에게 전달되고 
      //해당 코드는 callstack에 등록됨
      console.log('test1');

      test(2000, () => {
        console.log('test2');

        console.log('end');
      })
    })



     // ######## promise객체를 통한 동기화
     function test(delay, callback) {
      setTimeout(() => {
        callback();
      }, delay)
    //기본 promise의 사용법
    //비동기로 동작되는 구문을 new Promise를 통해 반환되는 인스턴스 객체에 담아 내보냄
    //해당 프로미스 객체에서는 then, catch메서드 호출 가능 (동기적으로 실행됨)
    //실제로 직접 promise객체를 생성해서 내보낼일이 많이 없음 
    //비동기가 발생하는 대표적인 사례가 외부 데이터를 불러올때 발생
    //es6에서 fetch라는 메서드가 기본적으로 promise객체를 내장해서 데이터를 반환해주기 때문

    function delay(time, cond) {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          console.log('test');
          cond ? resolve('success') : reject('fail');
        }, time)
      })
    }

    //es6에서 promise객체가 나오기 전 동기화 방법
    //동기화되어야 될 코드를 무조건 콜백함수로 전달
    //콜백함수로 다음에 동기적으로 실행될 코드를 넣으면 콜스택 입장에서는 애초에 다음에 실행할 코드를 물리적으로 제거
    //콜백함수를 통한 동기화 : 콜스택 입장에서 비동기 적으로 실행할 다음 코드를 원천적으로 제거
    //콜백을 통해서 동기화시의 문제점 : 점점 코드의 뎁스가 늘어나면서 코드 가독성이 떨어짐 (콜백지옥: callback hell)
    //해당 문제점의 대안으로 나온 es6 promise

    //start --> test1 --> test2 --> end
    console.log('start')

    //callstack 입장에서 첫번쨰 test함수가 호출되고 나면 더이상 callstatck 에 등록할 코드 자체가 없으니 hold되고 있음
    test(2000, () => {
      //아래 코드가 통채로 web api에게 전달되고 
      //해당 코드는 callstack에 등록됨
      console.log('test1');

      test(2000, () => {
        console.log('test2');

    console.log('start');
    //delay함수에서 아무리 시간이 오래걸린다고 하더라도 해당 함수는 프로미스 객체를 리턴하기 때문에
    //뒤에 then이나 catch 문을 호출할 수 있고 해당 함수들을 동기적으로 실행됨
    delay(2000, false)
      .then((res) => {
        console.log(res);
        console.log('end')
      }).catch((err) => {
        console.log(err);
        console.log('end');
      })
    })
      });



     // ######## 프로미스 객체를 반환하는 함수를 통해 동기화하는 방법
//기본 promise의 사용법
    //비동기로 동작되는 구문을 new Promise를 통해 반환되는 인스턴스 객체에 담아 내보냄
    //해당 프로미스 객체에서는 then, catch메서드 호출 가능 (동기적으로 실행됨)
    //실제로 직접 promise객체를 생성해서 내보낼일이 많이 없음 
    //비동기가 발생하는 대표적인 사례가 외부 데이터를 불러올때 발생
    //es6에서 fetch라는 메서드가 기본적으로 promise객체를 내장해서 데이터를 반환해주기 때문

    //프로미스 객체를 반환하는 함수 필요
    function delay(time, cond) {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
@@ -26,10 +21,9 @@
      })
    }

    console.log('start');
    //delay함수에서 아무리 시간이 오래걸린다고 하더라도 해당 함수는 프로미스 객체를 리턴하기 때문에
    //뒤에 then이나 catch 문을 호출할 수 있고 해당 함수들을 동기적으로 실행됨    
    /*
    //사용예시 1
    //delay함수가 promise객체를 반환하고 있기 떄문에
    //동기적으로 then, catch문을 써서 원하는 코드를 동기적으로 호출가능
    delay(2000, false)
      .then((res) => {
        console.log(res);
@@ -38,23 +32,15 @@
        console.log(err);
        console.log('end');
      });
      */
    //위의 then, catch문은 해당 함수의 인수로 다시 콜백함수를 넣어야 되기 때문에 코드 가독성이 떨어짐
    //해당 문제점을 개선하기 위해 async await문 활용
    //async await을 활용하기 위한 전제 조건 - 이전함수가 promise객체를 반환하는 함수가 있어야 되고 해당 함수를 wrapping할 함수 필요
    //async await을 활용하면 then문에 비해 간결하게 동기화 처리할 수 있으나 catch문 활용이 불가능
    //이를 위해서 아래와 같이 try catch문으로 강제 예외처리 

    async function wrapper() {
      try {
        const result = await delay(2000, false);
        console.log('end');
        console.log(result);
      }
      catch (err) {
        console.log(err);
      }

    //delay함수가 promise객체를 반환할떄 wrapping함수를 만들고 async키워드를 붙여주고
    //그 안쪽에서 promise객체를 반환하는 함수 앞쪽에 await를 써주면 
    //그 이후 실행되는 코드 동기화
    async function wrapper() {
      const result = await delay(2000, false);
      console.log('end');
      console.log(result);
    }

    wrapper();


  </script>
</body>

</html>