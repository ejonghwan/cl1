<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <ul>
      <li>list1</li>
      <li>list2</li>
      <li>list3</li>
      <li>list4</li>
    </ul>
    <script>


// 1 불변성 유지 함수의 이해
      const lis = document.querySelectorAll('ul li');
      const colors = ['red', 'green', 'blud'];
      console.log(lis);
  
      lis.map((el) => console.log(el));
  
  
      //문자열.inclues('찾을 문자열') : 원본 문자열에서 인수로 전달된 문자열이 있는지 확인해서 boolean값 반환
      const names = ['김영희', '이철수', '김수진', '최판섭'];
  
      //find - 배열에서 조건이 만족하는 값이 있으면 true를 반환하며 바로 종료
      const result = names.find(el => el.includes('김'))
      console.log(result);
  
      //찾고자 하는 배열의 순서값을 반환
      const idx = names.findIndex(el => el.includes('이철수'));
      console.log(idx);
  
      //filter - 배열에서 찾고자 하는 모든 값을 반환
      //filter 사용시 조건식앞에 !붙이면 해당 조건이 아닌 나머지 값들이 배열로 반환
      const result2 = names.filter(el => !el.includes('김'));
      console.log(result2);
  
      //map - 기존의 배열을 반복처리 하면서 새로운 배열을 deep copy
      const result3 = names.map(el => el + '님'); //names.map(el=> { return el})
      console.log(result3);
  
      //기존의 names배열을 찍어보면 원본 배열은 그대로 유지가 되는 불변성(immutable) 상태인것을 알 수 있다.
      //find, filter, map모두 불변성을 유지시켜주는 배열 전용 함수 (추후 react에서 원본값과 변경값을 비교하기 위한 중요한 개념)
      //위의 함수들은 배열 전용 내장함수 이므로 querySelectorAll로 반환되는 유사배열에는 사용 불가
      //유사배열에 해당 함수들을 사용하고 싶을 때에는 Array.from()을 이용해 순수배열로 변환한 상태에서 사용 가능
  






// 2 reduce를 통한 누적 연산처리
const colors = ['red', 'green', 'blud'];
    console.log(lis);

    lis.map((el) => console.log(el));


    //문자열.inclues('찾을 문자열') : 원본 문자열에서 인수로 전달된 문자열이 있는지 확인해서 boolean값 반환
    const names = ['김영희', '이철수', '김수진', '최판섭'];
@@ -48,6 +46,13 @@
    //위의 함수들은 배열 전용 내장함수 이므로 querySelectorAll로 반환되는 유사배열에는 사용 불가
    //유사배열에 해당 함수들을 사용하고 싶을 때에는 Array.from()을 이용해 순수배열로 변환한 상태에서 사용 가능

    //reduce
    //기존의 값을 축적하면서 누적된 연산값을 반환
    //배열.reduce((누적값, 현재값, 순서)=> 연산식, 초기값)
    const origin = [1, 2, 3];
    const accumulatedNumber = origin.reduce((acc, cur, idx) => acc + cur, 10);
    console.log(accumulatedNumber)




    // 3 rest파라미터 사용예시 1 
    //누적 연산 처리 함수
    const calc = (how, ...rest) => {
      console.log(how);
      console.log(rest);

      if (how === '+') return rest.reduce((acc, cur) => acc + cur);
      if (how === '-') return rest.reduce((acc, cur) => acc - cur);
      if (how === '*') return rest.reduce((acc, cur) => acc * cur);
      if (how === '/') return rest.reduce((acc, cur) => acc / cur);
    }

    console.log(calc('*', 123, 2, 8));

    </script>
  </body>
</html>